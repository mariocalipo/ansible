
- name: Set download directory
  ansible.builtin.set_fact:
    agent_dl_dir: "{{ drives.data | default('C', true) }}:\\tools"

- name: Create tools directory
  ansible.windows.win_file:
    path: "{{ agent_dl_dir }}"
    state: directory

- name: Download octopus tentacle msi
  ansible.windows.win_shell: |
    gsutil cp {{ agents.octopus.tentacle_gcs_uri }} {{ agent_dl_dir }}\\OctopusTentacle-{{ agents.octopus.tentacle_version }}.msi
  args:
    creates: "{{ agent_dl_dir }}\\OctopusTentacle-{{ agents.octopus.tentacle_version }}.msi"
    chdir: C:\Program Files (x86)\Google\Cloud SDK\google-cloud-sdk\bin

- name: Retrieve octopus api key from Google Secret Manager
  ansible.windows.win_shell: |
    gcloud secrets versions access latest --secret="octopus-tentacle-api"
  register: octopus_tentacle_api_key
  no_log: true
  changed_when: octopus_tentacle_api_key.rc != 0

- name: Retrieve octopus thumbprint from Google Secret Manager
  ansible.windows.win_shell: |
    gcloud secrets versions access latest --secret="octopus-server-thumbprint"
  register: octopus_thumbprint
  no_log: true
  changed_when: octopus_thumbprint.rc != 0

- name: Retrieve octopus tentacle service account from Google Secret Manager
  ansible.windows.win_shell: |
    gcloud secrets versions access latest --secret="octopus-tentacle-svc"
  register: octopus_tentacle_svc
  no_log: true
  changed_when: octopus_tentacle_svc.rc != 0

- name: Retrieve octopus tentacle service password from Google Secret Manager
  ansible.windows.win_shell: |
    gcloud secrets versions access latest --secret="octopus-tentacle-svc-pwd"
  register: octopus_tentacle_svc_pwd
  no_log: true
  changed_when: octopus_tentacle_svc_pwd.rc != 0

- name: Install octopus from msi
  ansible.windows.win_package:
    path: "{{ agent_dl_dir }}\\OctopusTentacle-{{ agents.octopus.tentacle_version }}.msi"
    arguments: "/qn /norestart"

- name: Get info for tentacle service
  ansible.windows.win_service_info:
    name: "OctopusDeploy Tentacle: Polling"
  register: service_info

- name: Install polling tentacle
  when: service_info.exists == false
  ansible.windows.win_powershell:
    script: |
      $tentacle = $env:COMPUTERNAME
      $octopusAPIKey = "{{ octopus_tentacle_api_key.stdout }}"
      $octopusTrust  = "{{ octopus_thumbprint.stdout }}"
      $octopusTentSvcAcct = "{{ octopus_tentacle_svc.stdout }}"
      $octopusTentSvcPwd = "{{ octopus_tentacle_svc_pwd.stdout }}"

      # Set env variable based on hostname
      switch($tentacle){
        {$_ -match 'dev' -and (!($_ -match 'sql'))}{$octopusURI='http://10.3.3.2';$GCPEnv="dev";$OctoHome=“F:\Octopus";$OctoApp="F:\Octopus\Applications"}
        {$_ -match 'dev' -and ($_ -match 'sql')}{$octopusURI='http://10.4.4.2';$GCPEnv="dev";$OctoHome="K:\Octopus";$OctoApp="K:\Octopus\Applications"}
        {$_ -match 'stg' -and (!($_ -match 'sql'))}{$octopusURI='http://10.2.3.3';$GCPEnv="stage";$OctoHome=“F:\Octopus";$OctoApp="F:\Octopus\Applications"}
        {$_ -match 'stg' -and ($_ -match 'sql')}{$octopusURI='http://10.5.4.2';$GCPEnv="stage";$OctoHome="K:\Octopus";$OctoApp="K:\Octopus\Applications"}
        {$_ -match 'uat' -and (!($_ -match 'sql'))}{$octopusURI='http://10.7.4.3';$GCPEnv="uat";$OctoHome=“F:\Octopus";$OctoApp="F:\Octopus\Applications"}
        {$_ -match 'uat' -and ($_ -match 'sql')}{$octopusURI='http://10.8.4.2';$GCPEnv="uat";$OctoHome="K:\Octopus";$OctoApp="K:\Octopus\Applications"}
        {$_ -match 'prd' -and (!($_ -match 'sql'))}{$octopusURI='http://10.10.4.3';$GCPEnv="prod";$OctoHome=“F:\Octopus";$OctoApp="F:\Octopus\Applications"}
        {$_ -match 'prd' -and ($_ -match 'sql')}{$octopusURI='http://10.0.2.11';$GCPEnv="prod";$OctoHome="K:\Octopus";$OctoApp="K:\Octopus\Applications"}
        default {$octopusURI='<<URL>>';$GCPEnv="Holding"}
      }

      # Get role assignmnet based on tier
      switch($tentacle){
        {$_ -match 'web'}{write-host "Assigning Roles for Web server: web";$octopusRole='web'}
        {$_ -match 'etl'}{write-host "Assigning Roles for Etl server: etl";$octopusRole='etl'}
        {$_ -match 'sql'}{write-host "Assigning Roles for Database server: sql";$octopusRole='sql'}
        default {write-host "No Matches - proceeding with no role";$octopusRole='NONE';}
      }

      # Configure Polling Tentacle and register
      & "C:\Program Files\Octopus Deploy\Tentacle\Tentacle.exe" create-instance --instance "Polling" --config “$OctoHome\Tentacle.config"
      & "C:\Program Files\Octopus Deploy\Tentacle\Tentacle.exe" configure --instance "Polling" --reset-trust
      & "C:\Program Files\Octopus Deploy\Tentacle\Tentacle.exe" configure --instance "Polling" --home $OctoHome --app $OctoApp
      & "C:\Program Files\Octopus Deploy\Tentacle\Tentacle.exe" polling-proxy --instance "Polling" --proxyEnable "False"
      & "C:\Program Files\Octopus Deploy\Tentacle\Tentacle.exe" service --instance "Polling" --install --start --stop
      & "C:\Program Files\Octopus Deploy\Tentacle\Tentacle.exe" register-with --instance "Polling" --server=$octopusURI --apiKey=$octopusAPIKey --environment=$GCPEnv --role=$octopusRole --comms-style "TentacleActive" --server-comms-port "10943" --space "LoanVantage" --force
      & "C:\Program Files\Octopus Deploy\Tentacle\Tentacle.exe" configure --instance "Polling" --noListen "True"
      switch($tentacle){
        {$_ -match 'sql'}{
          & "C:\Program Files\Octopus Deploy\Tentacle\Tentacle.exe" service --username $octopusTentSvcAcct -password $octopusTentSvcPwd 
          & "C:\Program Files\Octopus Deploy\Tentacle\Tentacle.exe" service --instance "Polling" --stop --start        
        }
        default {
          & "C:\Program Files\Octopus Deploy\Tentacle\Tentacle.exe" service --instance "Polling" --stop --start        
        }
      }